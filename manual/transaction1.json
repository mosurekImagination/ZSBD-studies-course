[
  {
    "name": "Firmy, które wykonały najwięcej zleceń w danym mieście, liczba i suma zleceń",
    "query": "WITH SQ1 AS(SELECT LOCATION.CITY, COMPANY.NAME, COUNT(INVOICE.ID) AS INVOICECOUNT, SUM(INVOICE.SUMMARY_COST) INVOICESUM FROM LOCATION JOIN COMPANY ON LOCATION.ID = COMPANY.LOCATION_ID JOIN INVOICE ON COMPANY.ID = INVOICE.COMPANY_ID GROUP BY LOCATION.CITY, COMPANY.NAME) SELECT SQ1.CITY, NAME, INVOICECOUNT, INVOICESUM FROM SQ1 JOIN (SELECT CITY, MAX(INVOICECOUNT) MAXINVOICECOUNT FROM SQ1 GROUP BY CITY) SQ2 ON SQ1.CITY = SQ2.CITY WHERE INVOICECOUNT = MAXINVOICECOUNT ORDER BY SQ1.CITY"
  },
  {
    "name": "Dodaj samochód stacji",
    "query": "UPDATE CAR SET CAR_STATION_ID=1 WHERE ID=1"
  },
  {
    "name": "Pogrupowane miasta, liczba dostępnych, niedostępnych samochodów, liczba dostępnych, niedostępnych stacji",
    "query": "SELECT SQ1.CITY AS CITY, SQ1.AVALIABLESTATIONS AS AVALIABLESTATIONS, SQ2.UNAVALIABLESTATIONS AS UNAVALIABLESTATIONS, SQ3.AVALIABLECARS AS AVALIABLECARS, SQ4.UNAVALIABLECARS AS UNAVALIABLECARS FROM(SELECT LOCATION.CITY AS CITY, COUNT(CARSTATION.ID) AS AVALIABLESTATIONS FROM LOCATION JOIN CARSTATION ON LOCATION.ID = CARSTATION.LOCATION_ID GROUP BY LOCATION.CITY, CARSTATION.AVAILABLE HAVING CARSTATION.AVAILABLE = 'true') SQ1 JOIN (SELECT LOCATION.CITY AS CITY, COUNT(CARSTATION.ID) AS UNAVALIABLESTATIONS FROM LOCATION JOIN CARSTATION ON LOCATION.ID = CARSTATION.LOCATION_ID GROUP BY LOCATION.CITY, CARSTATION.AVAILABLE HAVING CARSTATION.AVAILABLE = 'false') SQ2 ON SQ1.CITY = SQ2.CITY JOIN (SELECT LOCATION.CITY AS CITY, COUNT(CAR.ID) AS AVALIABLECARS FROM LOCATION JOIN CARSTATION ON LOCATION.ID = CARSTATION.LOCATION_ID JOIN CAR ON CARSTATION.ID = CAR.CAR_STATION_ID GROUP BY LOCATION.CITY, CAR.AVAILABLE HAVING CAR.AVAILABLE = 'true') SQ3 ON SQ2.CITY = SQ3.CITY JOIN (SELECT LOCATION.CITY AS CITY, COUNT(CAR.ID) AS UNAVALIABLECARS FROM LOCATION JOIN CARSTATION ON LOCATION.ID = CARSTATION.LOCATION_ID JOIN CAR ON CARSTATION.ID = CAR.CAR_STATION_ID GROUP BY LOCATION.CITY, CAR.AVAILABLE HAVING CAR.AVAILABLE = 'false') SQ4 ON SQ3.CITY = SQ4.CITY ORDER BY CITY"
  },
  {
    "name": "Samochody naprawione przez konkretne firmy",
    "query": "SELECT CAR.* FROM CAR JOIN DAMAGE ON CAR.ID=DAMAGE.CAR_ID JOIN INVOICE ON DAMAGE.INVOICE_ID=INVOICE.ID JOIN COMPANY ON INVOICE.COMPANY_ID=COMPANY.ID WHERE COMPANY.NAME IN ('Kanoodle', 'Avamm', 'Dabjam')"
  },
  {
    "name": "Przenies pracownika do innej stacji",
    "query": "UPDATE STATIONWORKER SET CAR_STATION_ID=1 WHERE CAR_STATION_ID=4"
  },
  {
    "name": "Przenieś wszystkie samochody do innej stacji",
    "query": "UPDATE CAR SET CAR_STATION_ID=1 WHERE CAR_STATION_ID=4"
  },
  {
    "name": "Usuń stację",
    "query": "DELETE CARSTATION WHERE ID=4"
  },
  {
    "name": "Wypożyczenie samochodu z dwoma wypożyczeniami",
    "query": "UPDATE RENTALHISTORY SET RATING=1 WHERE ID=462"
  },
  {
    "name": "Dodanie oceny do wypozyczenia wyzwala obliczenie nowej oceny dla samochodu, ktorego dotyczy wypozyczenie.",
    "query": "UPDATE CAR SET RATING=(SELECT AVG(RATING) FROM RENTALHISTORY WHERE CAR_ID=(SELECT CAR_ID FROM RENTALHISTORY WHERE ID=462)) WHERE ID=(SELECT CAR_ID FROM RENTALHISTORY WHERE ID=462)"
  },
  {
    "name": "Zmiana formatu daty",
    "query": "ALTER session set NLS_DATE_FORMAT='DD/MM/YYYY'"
  },
  {
    "name": "Uzytkownicy ktorzy wypozyczyli samochod w okreslonym przedziale czasowym w okreslonym miescie.",
    "query": "SELECT SYSTEMUSER.* FROM SYSTEMUSER JOIN RENTALHISTORY ON SYSTEMUSER.ID=RENTALHISTORY.USER_ID JOIN CARSTATION ON RENTALHISTORY.START_STATION_ID=CARSTATION.ID JOIN LOCATION ON CARSTATION.LOCATION_ID=LOCATION.ID WHERE RENTALHISTORY.START_DATE BETWEEN '01/01/2017' AND '31/12/2017' AND LOCATION.CITY='Asahi'"
  },
  {
    "name": "Uzytkownicy ktorzy spowodowali wiecej szkod niz przychodu",
    "query": "SELECT PAYMENTS.ID, PAYMENTS.DOCUMENT_TYPE_ID, PAYMENTS.TITLE, PAYMENTS.NAME, PAYMENTS.SURNAME, PAYMENTS.EMAIL, PAYMENTS.PHONE FROM ( SELECT SYSTEMUSER.ID, SYSTEMUSER.DOCUMENT_TYPE_ID, SYSTEMUSER.TITLE, SYSTEMUSER.NAME, SYSTEMUSER.SURNAME, SYSTEMUSER.EMAIL, SYSTEMUSER.PHONE, NVL(SUM(PAYMENT.COST*(100-PAYMENT.DISCOUNT)), 0) AS SUM FROM SYSTEMUSER LEFT JOIN RENTALHISTORY ON SYSTEMUSER.ID=RENTALHISTORY.USER_ID LEFT JOIN PAYMENT ON RENTALHISTORY.PAYMENT_ID=PAYMENT.ID GROUP BY SYSTEMUSER.ID, SYSTEMUSER.DOCUMENT_TYPE_ID, SYSTEMUSER.TITLE, SYSTEMUSER.NAME, SYSTEMUSER.SURNAME, SYSTEMUSER.EMAIL, SYSTEMUSER.PHONE ) PAYMENTS JOIN ( SELECT SYSTEMUSER.ID, NVL(SUM(INVOICE.SUMMARY_COST), 0) AS SUM FROM SYSTEMUSER LEFT JOIN RENTALHISTORY ON SYSTEMUSER.ID=RENTALHISTORY.USER_ID LEFT JOIN DAMAGE ON RENTALHISTORY.ID=DAMAGE.RENTAL_ID LEFT JOIN INVOICE ON DAMAGE.INVOICE_ID=INVOICE.ID GROUP BY SYSTEMUSER.ID ) DAMAGES ON PAYMENTS.ID=DAMAGES.ID WHERE DAMAGES.SUM>PAYMENTS.SUM"
  }
]
