-- 1. Pokaż wyłączone / włączone stacje
SELECT * FROM CARSTATION WHERE AVAILABLE = 'false';
SELECT * FROM CARSTATION WHERE AVAILABLE = 'true';

-- 2. Dodaj pracownika do stacji
INSERT INTO STATIONWORKER (ID, CAR_STATION_ID, NAME, SURNAME, PHONE) VALUES (99999, 123, 'George', 'Nowak', 123456789);

-- 3. Samochody, które były naprawiane przez więcej niż X firm
WITH REPAIRING_COMPANIES AS (SELECT C2.ID, C2.MODEL, COUNT(C2.ID) REPAIRS
FROM COMPANY
         JOIN INVOICE I2 on COMPANY.ID = I2.COMPANY_ID
         JOIN INSPECTION I on I2.ID = I.INVOICE_ID
         JOIN CAR C2 on C2.ID = I.CAR_ID
GROUP BY C2.ID, C2.MODEL)

SELECT * FROM REPAIRING_COMPANIES WHERE REPAIRS > 2


-- 4. Top X miast w ktorych wypozyczane sa samochody
WITH GROUPED_RENTALS AS (
    SELECT START_STATION_ID, COUNT(ID) RENTALS
    FROM RENTALHISTORY RH
    GROUP BY START_STATION_ID),

     ORDERED AS (
         SELECT L.CITY, RENTALS
         FROM LOCATION L
                  JOIN CARSTATION C2 on L.ID = C2.LOCATION_ID
                  JOIN GROUPED_RENTALS GR ON GR.START_STATION_ID = C2.ID
         ORDER BY RENTALS DESC
     )

SELECT * FROM ORDERED WHERE ROWNUM <= 10;

-- 5. % samochodow wypozyczanych i oddawanych w tym samym miescie
-- SELECT COUNT(*)
-- FROM RENTALHISTORY RH
--          JOIN CARSTATION CS ON RH.START_STATION_ID = CS.ID
--          JOIN CARSTATION CSEND ON RH.END_STATION_ID = CSEND.ID
--          JOIN LOCATION L ON L.ID = CS.LOCATION_ID
--          JOIN LOCATION LEND ON LEND.ID = CSEND.LOCATION_łID
-- WHERE L.CITY = LEND.CITY;

-- 6. Dodaj znizke do trwajacych wypozyczen rozpoczetych w danym miescie w okreslonym czasie
UPDATE PAYMENT
SET DISCOUNT = DISCOUNT + 5,
    COST     = COST * 0.90
WHERE STATUS_ID = (SELECT ID FROM PAYMENTSTATUS WHERE STATUS = 'waiting')
  AND ID = (SELECT PAYMENT_ID
            FROM RENTALHISTORY H
                     JOIN CARSTATION CS ON CS.ID = H.START_STATION_ID
                     JOIN LOCATION L on CS.LOCATION_ID = L.ID
            WHERE START_DATE BETWEEN '2017/01/01' AND '2017/12/31'
              AND L.CITY = 'Hannover');

-- 7. Wystawienie faktury za naprawe
--------- zmiana statusu wszystkich uszkodzen
--------- naprawa samochodu (available)
--------- dodanie kosztow naprawy do oplaty za wypozyczenie
UPDATE CAR
SET AVAILABLE = 'true'
WHERE ID = 36;

INSERT INTO INVOICE(ID, STATUS_ID, COMPANY_ID, SUMMARY_COST, EXPOSURE_DATE, PAYMENT_DATE, EXPIRE_DATE)
VALUES (99999, (SELECT ID FROM PAYMENTSTATUS WHERE STATUS = 'waiting'), 20, 200.0,
        TO_DATE('2017/12/05', 'yyyy/mm/dd'),
        TO_DATE('2018/12/05', 'yyyy/mm/dd'),
        TO_DATE('2019/12/05', 'yyyy/mm/dd'));

UPDATE DAMAGE
SET STATUS_ID  = (SELECT ID FROM DAMAGESTATUS WHERE STATUS = 'repaired'),
    INVOICE_ID = (SELECT MAX(ROWNUM) FROM INVOICE)
WHERE CAR_ID = 36;

SELECT MAX(ROWNUM) FROM INVOICE;
SELECT ID FROM INVOICE WHERE ROWNUM = (SELECT MAX(ROWNUM) FROM INVOICE);

UPDATE PAYMENT
SET COST = COST + (SELECT SUMMARY_COST FROM INVOICE WHERE ROWNUM = (SELECT MAX(ROWNUM) FROM INVOICE))
WHERE ID = (SELECT PAYMENT_ID FROM RENTALHISTORY WHERE CAR_ID = 36);


-- 8. Uzytkownicy ktorzy w zadanym okresie czasu mieli kontakt z konkretnym pracownikiem (coronavirus)
WITH LOOKING_S_WORKER AS (SELECT CAR_STATION_ID FROM STATIONWORKER WHERE SURNAME = 'Aleevy')

SELECT USR.ID, DOCUMENT_TYPE_ID, TITLE, NAME, SURNAME, EMAIL, PHONE
FROM SYSTEMUSER USR
         JOIN RENTALHISTORY R on USR.ID = R.USER_ID
         JOIN CARSTATION CS ON R.START_STATION_ID = CS.ID OR R.END_STATION_ID = CS.ID
         JOIN LOOKING_S_WORKER LSW ON LSW.CAR_STATION_ID = CS.ID
WHERE START_DATE > '2017/01/01'
  AND END_DATE < '2018/12/31';

-- 9. Wylacz stacje ktore generuja straty wyzsze niz srednia strat ze stacji w tym samym panstwie